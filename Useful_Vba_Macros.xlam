'------------------------------------------------------------------------------------------------------------------------------------------------------------
Public Sub SheetClean(ByVal SheetName As String)

'This subroutine is intended to clean up a worksheet by performing the following operations
'1) Unmerging all cells
'2) Remove Wrap Text
'3) Standardize font syle, color, and size
'4) Center-Center all cells
'5) Remove Hyperlinks

    Dim ws As Worksheet
    
    Set ws = ActiveWorkbook.Worksheets(SheetName)
    
    '1) Unmerge all cells
    ws.Cells.UnMerge
    
    '2) Remove Wrap Text
    ws.Cells.WrapText = False
    
    '3) Standardize font syle, color, and size
    ws.Cells.Font.Color = vbBlack
    ws.Cells.Font.Size = 10
    ws.Cells.Font.Name = "Arial"
    ws.Cells.Font.Bold = False
    ws.Cells.Font.Italic = False
    ws.Cells.Interior.Color = xlNone
    
    '4) Center-Center all cells
    ws.Cells.HorizontalAlignment = xlHAlignCenter
    ws.Cells.VerticalAlignment = xlVAlignCenter
    
   '5) Remove Hyperlinks
    ws.Cells.Hyperlinks.Delete
   
End Sub

'------------------------------------------------------------------------------------------------------------------------------------------------------------

'This function is intended to find the last column in the worksheet and return the value as a long variable
'If the sheet is empty, then 0 will be returned as the value

Public Function LastColValue(ByVal SheetName As String) As Long

    Dim ws As Worksheet
    Dim lastCol As Long
    
    Set ws = ActiveWorkbook.Worksheets(SheetName)
 
    If Application.WorksheetFunction.CountA(ws.Cells) <> 0 Then
    
        With ws
            lastCol = .Cells.Find( _
                                What:="*", _
                                After:=.Range("A1"), _
                                LookIn:=xlFormulas, _
                                LookAt:=xlPart, _
                                SearchOrder:=xlByColumns, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Column
                                           
        End With
    
    Else
        
        lastCol = 0
        
    End If
    
    LastColValue = lastCol

End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------------

'This function is intended to find the last row in the worksheet and return the value as a long variable
'If the sheet is empty, then 0 will be returned as the value

Public Function LastRowValue(ByVal SheetName As String) As Long

    Dim ws As Worksheet
    Dim lastRow As Long
    
    Set ws = ActiveWorkbook.Worksheets(SheetName)
 
    If Application.WorksheetFunction.CountA(ws.Cells) <> 0 Then
    
        With ws
            lastRow = .Cells.Find( _
                                What:="*", _
                                After:=.Range("A1"), _
                                LookIn:=xlFormulas, _
                                LookAt:=xlPart, _
                                SearchOrder:=xlByRows, _
                                SearchDirection:=xlPrevious, _
                                MatchCase:=False).Row
                                           
        End With
    
    Else
        
        lastRow = 0
        
    End If
    
    LastRowValue = lastRow

End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------------

Public Sub RemoveEmptyRows(ByVal SheetName As String, rowRange As Long)
'This subroutine deletes all empty rows in a sheet between a certain range.
    
    Dim ws As Worksheet
    
    Set ws = ActiveWorkbook.Worksheets(SheetName)
        
    Dim i As Long
        
        i = 1
    
    Do While i < rowRange
        
        If Application.WorksheetFunction.CountA(ws.Rows(i).EntireRow) = 0 Then
            ws.Rows(i).EntireRow.Delete
            'reduce row range by 1 since deleting previous row
            rowRange = rowRange - 1
            'check new row to see if its also blank -- accounts for multiple blank rows
            i = i - 1
        End If
         
        i = i + 1
         
    Loop

End Sub

'------------------------------------------------------------------------------------------------------------------------------------------------------------

Public Sub RemoveEmptyColumns(ByVal SheetName As String, colRange As Long)
'This subroutine deletes all columns in a sheet within a specific range

    Dim ws As Worksheet
    
    Set ws = ActiveWorkbook.Worksheets(SheetName)
        
    Dim i As Long
        
        i = 1
    
    Do While i < colRange
        
        If Application.WorksheetFunction.CountA(ws.Columns(i).EntireColumn) = 0 Then
            ws.Columns(i).EntireColumn.Delete
            'reduce last column value by 1 since deleting earlier col
            colRange = colRange - 1
            'recheck 'new' i column to see if it is also empty -- this is for multiple blanks in a row
            i = i - 1
        End If
         
        i = i + 1
         
    Loop

End Sub

'------------------------------------------------------------------------------------------------------------------------------------------------------------

Public Sub SingleRowCombine(ByVal SheetName As String, idCol As Long, rowRange As Long, colRange As Long, Optional clearValues As Boolean = False)
'This subroutine is used combine multiple rows associated with an identifier (idCol) into a single row
'E.g. A sheet has merged cells, when cells are unmerged, they content of the cells spans multiple rows;
'this subroutine will "remerge" the contents into a single cell / single row.

    Dim ws As Worksheet
    Set ws = ActiveWorkbook.Worksheets(SheetName)
       
    Dim currentID, lastID As String
    Dim startRow, currentRow, lastIDRow, lastRow, startColumn, currentColumn, lastColumn As Long
    
        startColumn = 1 'starting from beginning
        lastColumn = colRange 'user input for last column
        
        startRow = 1
        lastRow = rowRange

    For currentRow = startRow To lastRow
    
        currentID = ws.Cells(currentRow, idCol).Value
        
        If (currentRow = startRow) Then
            lastIDRow = startRow
            lastID = ws.Cells(startRow, idCol).Value
        Else
            If IsEmpty(currentID) Or StrComp(currentID, lastID, 1) = 0 Then
                For currentColumn = startColumn To lastColumn
                    If Not IsEmpty(ws.Cells(currentRow, currentColumn).Value) Then
                        ws.Cells(lastIDRow, currentColumn).Value = ws.Cells(lastIDRow, currentColumn) & Chr(10) & ws.Cells(currentRow, currentColumn)
                    End If
                Next currentColumn
                
                If clearValues = True Then
                'clear values in cleaned up row
                    ws.Rows(currentRow).ClearContents
                End If
            Else
                lastIDRow = currentRow
                lastID = ws.Cells(lastIDRow, idCol).Value
                

            End If
        End If
    Next currentRow
End Sub

'------------------------------------------------------------------------------------------------------------------------------------------------------------
Public Sub CombineBlock(ByVal area As Range, ByVal place As Range, Optional colSep As String = " / ")

Dim cell As Range
Dim currentRow As Integer
Dim rowSep As String


currentRow = area.Item(1, 1).Row

For Each cell In area
If Not IsEmpty(cell.Value) Then
    If IsEmpty(place.Value) Then
        place.Value = place.Value & cell.Value
    ElseIf cell.Row = currentRow Then
        place.Value = place.Value & colSep & cell.Value
    Else
        place.Value = place.Value & Chr(10) & cell.Value
        currentRow = cell.Row
    End If
End If
Next cell


End Sub

'------------------------------------------------------------------------------------------------------------------------------------------------------------
Public Sub mergeFiles()
    'Merges all files in a folder to a main file.
    
    'Define variables:
    Application.ScreenUpdating = False
    Dim numberOfFilesChosen, i As Integer
    Dim tempFileDialog As FileDialog
    Dim mainWorkbook, sourceWorkbook As Workbook
    Dim tempWorkSheet As Worksheet
    
    Set mainWorkbook = Application.ActiveWorkbook
    Set tempFileDialog = Application.FileDialog(msoFileDialogFilePicker)
    
    'Allow the user to select multiple workbooks
    tempFileDialog.AllowMultiSelect = True
    
    numberOfFilesChosen = tempFileDialog.Show
    
    'Loop through all selected workbooks
    For i = 1 To tempFileDialog.SelectedItems.Count
        
        'Open each workbook
        Workbooks.Open tempFileDialog.SelectedItems(i)
        
        Set sourceWorkbook = ActiveWorkbook
        
        'Copy each worksheet to the end of the main workbook
        For Each tempWorkSheet In sourceWorkbook.Worksheets
            tempWorkSheet.Copy after:=mainWorkbook.Sheets(mainWorkbook.Worksheets.Count)
        Next tempWorkSheet
        
        'Close the source workbook
        sourceWorkbook.Close
    Next i
    
    Application.ScreenUpdating = True
    
End Sub
'------------------------------------------------------------------------------------------------------------------------------------------------------------
